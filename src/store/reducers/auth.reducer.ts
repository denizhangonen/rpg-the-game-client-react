import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { fetchCount } from '../../Apps/Counter/counterAPI';
import * as ACTION_TYPES from '../actions/actionTypes/auth-types';
import IAuth from '../../Shared/models/Auth/IAuth';

import jwtDecode from 'jwt-decode';
import axios from '../../Shared/axios';
import * as AUTH_ROUTES from '../../Shared/Routes/authRoutes';
import * as AUTH_UTILITIES from '../../Shared/authUtilities';
import * as GLOSSARY from '../../Shared/glossary';

interface IAuthReducerState {
    auth: IAuth | undefined;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: IAuthReducerState = {
    auth: undefined,
    status: 'idle',
};

interface IAction {
    type: string;
    payload: any;
}

export const loginAsync = createAsyncThunk(
    '/auth/login',
    async (payload: any) => {
        const { email, password } = payload;
        try {
            const response = await axios.post(AUTH_ROUTES.LOGIN, {
                email,
                password,
            });
            const dT: any = jwtDecode(response.data.token);
            const successObj: IAuth = {
                email: email,
                token: response.data.token,
                userId: response.data.userId,
                expirationDate: new Date(dT.exp * 1000).toString(),
            };
            await AUTH_UTILITIES.setLocalStorage(successObj);
            return successObj;
        } catch (error) {
            console.log('error:', error);
        }
    }
);

/*export const authCheckState = () => async (dispatch: Dispatch) => {
    const token = localStorage.getItem(GLOSSARY.ACCESS_TOKEN);
    if (!token) {
        //dispatch(logout());
    } else {
        const expirationDate: any = localStorage.getItem(
            GLOSSARY.ACCESS_TOKEN_EXPIRATION_DATE
        );
        if (expirationDate) {
            if (expirationDate <= new Date()) {
                //dispatch(logout());
            } else {
                const email = localStorage.getItem(GLOSSARY.EMAIL);
                const token = localStorage.getItem(GLOSSARY.ACCESS_TOKEN);
                const userId = localStorage.getItem(GLOSSARY.USERID);
                const expirationDate = localStorage.getItem(
                    GLOSSARY.ACCESS_TOKEN_EXPIRATION_DATE
                );
                if (email && token && userId && expirationDate) {
                    const successObj: IAuth = {
                        email,
                        token,
                        userId,
                        expirationDate,
                    };
                    //dispatch(authSuccess(successObj));
                }
            }
        }
    }
};*/

export const incrementAsync = createAsyncThunk(
    'counter/fetchCount',
    async (amount: number) => {
        const response = await fetchCount(amount);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        authSuccess: () => {},
        logout: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            AUTH_UTILITIES.clearLocalStorage();
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loginAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(loginAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.auth = action.payload;
            })
            .addCase(loginAsync.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const {} = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectAuth = (state: RootState) => state.auth;

export default authSlice.reducer;