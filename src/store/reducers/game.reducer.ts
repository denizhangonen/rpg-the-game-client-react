import { createSlice } from '@reduxjs/toolkit';
import { RootState } from '../store';

import { getChar } from '../actions/game.actions';
interface IGameReducerState {
    char: any | undefined;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: IGameReducerState = {
    char: undefined,
    status: 'idle',
};

interface IAction {
    type: string;
    payload: any;
}

export const gameSlice = createSlice({
    name: 'game',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        gameSuccess: () => {},
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getChar.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getChar.fulfilled, (state, action) => {
                state.status = 'idle';
                state.char = action.payload;
            })
            .addCase(getChar.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const {} = gameSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectChar = (state: RootState) => state.game.char;

export default gameSlice.reducer;

