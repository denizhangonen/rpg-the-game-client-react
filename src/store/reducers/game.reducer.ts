import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { fetchCount } from '../../Apps/Counter/counterAPI';
import * as ACTION_TYPES from '../actions/actionTypes/auth-types';
import IAuth from '../../Shared/models/Auth/IAuth';

import jwtDecode from 'jwt-decode';
import axios from '../../Shared/axios';
import * as AUTH_ROUTES from '../../Shared/Routes/authRoutes';
import * as AUTH_UTILITIES from '../../Shared/authUtilities';
import * as GLOSSARY from '../../Shared/glossary';

interface IGameReducerState {
    char: any | undefined;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: IGameReducerState = {
    char: undefined,
    status: 'idle',
};

interface IAction {
    type: string;
    payload: any;
}

export const getCharAsync = createAsyncThunk(
    '/char/63641c9c40a97c1bcd1e2759',
    async () => {
        try {
            const response = await axios.get('/char/63641c9c40a97c1bcd1e2759');
            return response.data.data;
        } catch (error) {
            console.log('error:', error);
        }
    }
);

export const gameSlice = createSlice({
    name: 'game',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        gameSuccess: () => {},
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getCharAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getCharAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.char = action.payload;
            })
            .addCase(getCharAsync.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const {} = gameSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectChar = (state: RootState) => state.game.char;

export default gameSlice.reducer;

